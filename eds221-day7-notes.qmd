---
title: "eds221-day7-notes"
format: html
editor: visual
---

## Working with relational database managements systems

working with relational databases

-   Mutating joins = adds new variables to one data frame from matching observations in another

-   Filtering joins = filter observations from one data frame based on whether or not they match an observation in the other table

-   Key = a variable that store unique information that can be used to connect information across datasets

# Different types of joins

## full_join(x, y)

= everything from both data frames is retained, regardless of whether or not it has a match in the data frame it's being joined to

![](images/Screen%20Shot%202023-08-22%20at%2010.20.51%20AM.png)

When you run full_join(animals, sites), you'll get:

![](images/Screen%20Shot%202023-08-22%20at%2010.22.33%20AM.png)

## left_join(x,y)

= everything in x is kept. Things from y that *have* a matching key in x are joined to it. Things in y that do *not* have a matching key in x are dropped.

example:

![](images/Screen%20Shot%202023-08-22%20at%2010.26.45%20AM.png)

What do we expect for left_join(animals,sites)?

![](images/Screen%20Shot%202023-08-22%20at%2010.27.47%20AM.png)

## inner_join(x,y)

= only keep stuff if they have a key match in x and y

![](images/Screen%20Shot%202023-08-22%20at%2010.37.39%20AM.png)

What is the output of inner_join(animals, sites)?

![](images/Screen%20Shot%202023-08-22%20at%2010.38.53%20AM.png)

# Interactive Session 1

```{r}
library(tidyverse)
library(palmerpenguins)
```

## Data wrangling refresher

1.  Starting from penguins, write a single piped sequence in which you
    -   only include penguins at Dream and Biscoe islands

    -   Remove the year and sex variables

    -   Add a new column body_mass_kg with penguin mass converted from g to kg

    -   Rename the island variable to location

```{r}
        # my answer
        # warmup_1 <- penguins %>% 
        #   filter(island == "Dream" | island == "Biscoe") %>% 
        #   select(-(year), -(sex)) %>% 
        #   mutate(body_mass_kg = body_mass_g /1000) %>% 
        #   mutate(location = island)

        # class example
        warmup_1 <- penguins %>% 
          filter(island %in% c("Dream", "Biscoe")) %>% 
          select(-year, -sex) %>% 
          mutate(body_mass_kg = (body_mass_g /1000)) %>% 
          mutate(location = island)
```

2.  Starting from penguins, write a single piped sequence to:
    -   Limit to Adelie penguins

    -   Remove any observation where flipper_length_mm is NA - !is.na() or drop.na()

    -   Group the data by sex

    -   Create a summary table that contains the mean, standard deviation, and sample size of flipper lengths for male and female Adelie penguins

```{r}
# my answer
# warmup_2 <- penguins %>% 
#   filter(species == "Adelie") %>% 
#   drop_na(flipper_length_mm) %>% 
#   group_by(sex) %>% 
#   summarize(mean_flipper_length = mean(flipper_length_mm),
#             sd_flipper_length = sd(flipper_length_mm),
#             sample_size = n())

# class answer
warmup_2 <- penguins %>% 
  filter(species == "Adelie", !is.na(flipper_length_mm)) %>% 
  group_by(sex) %>% 
  summarize(mean_flipper_length = mean(flipper_length_mm),
            sd_flipper_length = sd(flipper_length_mm),
            sample_size = n())
```

```{r}
# count function in dyplr
penguins %>% 
  group_by(species, island, sex) %>% 
  summarize(sample_size = n())

#below is the same as above. count is just wrapping togetehr group_by() + summarize() + n()
penguins %>% 
  count(species, island, sex)
```

# datapasta fun!

```{r}
library(tidyverse)
library(datapasta) # turn selectable table into dataframe in R
```

copy a random dataframe from internet, select "Addins" at the top, and paste as dataframe

example link: https://allisonhorst.github.io/EDS_221_programming-essentials/interactive_sessions/day_7_interactive.html

```{r}
animals <- data.frame(
  stringsAsFactors = FALSE,
          location = c("lagoon", "bluff", "creek", "oaks", "bluff"),
           species = c("bobcat", "coyote", "fox", "squirrel", "bobcat"),
          maturity = c("adult", "juvenile", "adult", "juvenile", "adult")
)

sites <- data.frame(
  stringsAsFactors = FALSE,
          location = c("beach", "lagoon", "bluff", "oaks"),
    full_site_name = c("Goleta Beach","UCSB Lagoon",
                       "Ellwood Mesa","Fremont Campground"),
      jurisdiction = c("SB City", "UCSB", "SB City", "USFS")
)
```

Full join:

```{r}
full_join_example <- full_join(animals, sites)
```

Left join:

```{r}
left_join_example <- left_join(animals, sites)
```

Inner join:

```{r}
inner_join_example <- inner_join(animals, sites)
```

# Date time lecture

ISO 8601 format (International Organization of Standardization)

Format: YYYY-MM-DD

What if we have more or higher resolution in time?

full date, hours, and minutes Format: YYYY-MM-DDThh::mm:TZD

full date, hours, minutes, and seconds format: YYYY-MM-DDThh::mm:ssTZD

TZD = UTC + or - where you are in the world

### example

9:07am on June 8th, 2016 in Perth, Australia (UTC+8)

= 2016-06-08T09:07+08:00

### example

What is ISO 8601 format for February 18, 1996 at 8:34pm PST in SB? Note: SB is 7 hours behind UTC

= 1996-02-18T20:34-07:00

What is the ISO 8601 format for 12/5/2002 at 2:41am in SB?

= 2002-12-05T02:41-07:00

## stringr package

str_detect() = is the pattern detected? (TRUE / FALSE)

str_replace() = replace a string pattern with something else

## Lubridate package

for dates

# Afternoon Interactive Session

## Date times with lubridate()

ymd: if the date is in year-month-day

mdy: if the date is in month-day-year

dmy: if the date is in day-month-year

```{r}
my_date_1 <- lubridate::mdy("03-15-1998")

my_date_2 <- lubridate::mdy("11/7/2003")

my_date_3 <- lubridate::dmy("08-Jun-1974")

my_date_4 <- lubridate::ymd("19740205")
```

Can we break the lubdridate parsing function? (teaser: yep)

```{r}
# my_date_5 <- lubridate::dmy("06-20-2001")
```

Adding times to our dates

```{r}
time_1 <- lubridate::ymd_hm("2020-08-12 11:18")
```

Parse June 2, 1982 at 4pm UTC (16:00) as a date in R

```{r}
time_2 <- lubridate::mdy_hm("June 2, 1982 4:00 PM")
```

Converting time zones

```{r}
# converting time_2 to LA timezone
with_tz(time_2, tzone = "America/Los_Angeles")
```

```{r}
# to NY time
with_tz(time_2, tzone = "America/New_York")
```

```{r}
# xurrent time in my area
Sys.time()

# current time in NY
now <- with_tz(Sys.time(), "America/New_York")
```

Access different parts of date/times

```{r}
class(now)

lubridate::day(now)

lubridate::week(now)

lubridate::hour(now)

lubridate::minute(now)
```

Example

```{r}
urchin_counts <- data.frame(
  date = c("October 12, 2004", "October 18, 2007", "February 12, 2003", "February 14, 2008"),
  species = c("purple", "red", "red", "red"),
  size_mm = c(19, 24, 18, 11)
)
```

```{r}
urchin_mean_by_month <- urchin_counts %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  mutate(month = lubridate::month(date)) %>% 
  group_by(month) %>% 
  summarize(mean_size = mean(size_mm))
```

# Strings with stringr

Use str_detect() to detect a string pattern

```{r}
my_string <- "Teddy loves salmon and kibble and toys"
```

```{r}
str_detect(my_string, pattern = "kibble")
```

```{r}
str_detect(my_string, pattern = "hot weather")
```

```{r}
my_string_2 <- c("burrito", "fish taco", "Taco salad", "super-burrito")
```

```{r}
str_detect(my_string_2, pattern = "taco")
```

```{r}
view(starwars)
```

Make a subset of starwars that keeps skywalker

```{r}
starwars %>% 
  filter(str_detect(name, pattern = "Skywalker"))
```

st_replace()

example: replace skywalker with

```{r}
question <- starwars %>% 
  mutate(name_new = str_replace(name, pattern = "Sky", replacement = "Fire"))
```

str_trim() to get rid of leading and trailing whitespace

str_squish() to get rid of leading and trailing whitespace AND excess interior whitespace

```{r}
my_string_3 <- "        Hi my name is      Teddy !!!"
```

```{r}
str_trim(my_string_3)
```

```{r}
str_squish(my_string_3)
```

```{r}
str_to_lower(my_string_3)
```

```{r}
str_to_upper(my_string_3)
```

```{r}
str_to_title(my_string_3)
```

```{r}
str_to_sentence(my_string_3)
```
